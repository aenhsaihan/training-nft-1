#import "@ligo/fa/lib/fa2/asset/multi_asset.mligo" "MULTIASSET"

/** ERROR MAP FOR UI DISPLAY or TESTS
    const errorMap : map<string,string> = Map.literal(list([
      ["0", "Enter a positive and not null amount"],
      ["1", "Operation not allowed, you need to be administrator"],
      ["2", "You cannot sell more than your current balance"],
      ["3", "Cannot find the bid you entered for buying"],
      ["4", "You entered a quantity to buy than is more than the bid offer quantity"],
      ["5", "Not enough funds, you need to pay at least quantity * bif price to get the tokens"],
      ["6", "Cannot find the contract relative to implicit address"],
    ]));
*/

type bid = {
  quantity : nat,
  price : nat
};

type storage =
  {
    administrator: address,
    bids: map<[address,nat],bid>,  //user sells a bid for a token_id 
    ledger: MULTIASSET.Ledger.t,
    metadata: MULTIASSET.Metadata.t,
    token_metadata: MULTIASSET.TokenMetadata.t,
    operators: MULTIASSET.Operators.t
  };

type ret = [list<operation>, storage];

type parameter =
  | ["Mint", nat,nat, string] //token_id, quantity, ipfsUrl for icon
  | ["Buy", nat,nat, address]  //buy token_id,quantity at a seller offer price
  | ["Sell", nat,nat, nat]  //sell token_id,quantity at a price
  | ["Transfer", MULTIASSET.transfer]
  | ["Balance_of", MULTIASSET.balance_of]
  | ["Update_operators", MULTIASSET.update_operators];

const buy = (token_id : nat, quantity: nat, seller: address, s: storage) : ret => {

  //search for the bid
  return match( Map.find_opt([seller,token_id],s.bids) , {
    None : () => failwith("3"),
    Some : (bid : bid) => {
      //check if quantity is enough
      if(quantity > bid.quantity) return failwith("4");
      //check if amount have been paid enough
      if(Tezos.get_amount() < (bid.price * quantity) * (1 as mutez)) return failwith("5");
      
      // prepare transfer of XTZ to seller
      const op = Tezos.transaction(unit,(bid.price * quantity) * (1 as mutez),Tezos.get_contract_with_error(seller,"6"));

      //transfer tokens from seller to buyer
      let ledger = MULTIASSET.Ledger.decrease_token_amount_for_user(s.ledger)(seller)(token_id)(quantity);
      ledger = MULTIASSET.Ledger.increase_token_amount_for_user(ledger)(Tezos.get_source())(token_id)(quantity);

      //update new bid
      const newBid = {...bid,quantity : abs(bid.quantity - quantity)};

      return [list([op]) as list<operation>, {...s, bids : Map.update([seller,token_id],Some(newBid),s.bids), ledger : ledger}];
    }
  }); 
};

const sell = (token_id : nat, quantity: nat, price: nat, s: storage) : ret => {

  //check balance of seller
  const sellerBalance = MULTIASSET.Ledger.get_for_user(s.ledger)(Tezos.get_source())(token_id);
  if(quantity > sellerBalance) return failwith("2"); 

  //need to allow the contract itself to be an operator on behalf of the seller
  const newOperators = MULTIASSET.Operators.add_operator(s.operators)(Tezos.get_source())(Tezos.get_self_address())(token_id); 

  //DECISION CHOICE: if bid already exists, we just override it
  return [list([]) as list<operation>,{...s,bids:Map.add([Tezos.get_source(),token_id],{quantity : quantity, price : price},s.bids),operators:newOperators}];
};

const mint = (token_id : nat, quantity: nat, _ipfsUrl: string, s: storage) : ret => {
   
   if(quantity <= (0 as nat)) return failwith("0");
   
   if(Tezos.get_sender() != s.administrator) return failwith("1");
   
   /*const token_info: map<string, bytes> = 
     Map.literal(list([
      ["name", (bytes `Wine NFT marketplace`)],
      ["description", (bytes `Wine NFT marketplace to buy and sell wine bottles`)],
      ["version", (bytes `1.0.0`)],
      ["interfaces", (bytes `["TZIP-12"]`)],
      ["thumbnailUri", (bytes ipfsUrl)],
      ["symbol", (bytes `WINE`)],
      ["decimals", (bytes `0`)]
     ])) as map<string, bytes>;
*/
/*
    const metadata : bytes = (bytes
  `{
      name:"FA2",
      description:"Example FA2 implementation",
      version:"0.1.0",
      license:{name:"MIT"},
      authors:["Pierre-Emmanuel Wulfman<pierre-emmanuelwulfman.fr>"],
      homepage:"",
      source:{
        tools:["Ligo"],
        location:"https://github.com/ligolang/contract-catalogue/tree/main/lib/fa2"},
      interfaces:["TZIP-012"],
      errors:(list([]) as list<string>),
      views:(list([]) as list<string>)
      }` as bytes);*/

    return [list([]) as list<operation>,
          {...s,
     ledger: Big_map.add([s.administrator,token_id],quantity as nat,s.ledger) as MULTIASSET.Ledger.t,
     metadata : MULTIASSET.Metadata.init(),//Big_map.literal(list([["",  Bytes.pack("tezos-storage:data") ],["data", MULTIASSET.Metadata.metadata]])),
     token_metadata: Big_map.add(token_id, {token_id: token_id,token_info:MULTIASSET.TokenMetadata.data1},s.token_metadata),//token_info}]])),
     operators: Big_map.empty as MULTIASSET.Operators.t}]};


const main = ([p, s]: [parameter,storage]): ret => 
    match(p, {
     Mint: (p: [nat,nat,string]) => mint(p[0],p[1],p[2], s),
     Buy: (p : [nat,nat,address]) => buy(p[0],p[1],p[2],s),
     Sell: (p : [nat,nat,nat]) => sell(p[0],p[1],p[2],s),
     Transfer: (p: MULTIASSET.transfer) => {
      const ret2 : [list<operation>, MULTIASSET.storage] = MULTIASSET.transfer(p)({ledger:s.ledger,metadata:s.metadata,token_metadata:s.token_metadata,operators:s.operators});
      return [ret2[0],{...s,ledger:ret2[1].ledger,metadata:ret2[1].metadata,token_metadata:ret2[1].token_metadata,operators:ret2[1].operators}];
     },
     Balance_of: (p: MULTIASSET.balance_of) => {
      const ret2 : [list<operation>, MULTIASSET.storage] = MULTIASSET.balance_of(p)({ledger:s.ledger,metadata:s.metadata,token_metadata:s.token_metadata,operators:s.operators});
      return [ret2[0],{...s,ledger:ret2[1].ledger,metadata:ret2[1].metadata,token_metadata:ret2[1].token_metadata,operators:ret2[1].operators}];
      },
     Update_operators: (p: MULTIASSET.update_operator) => {
      const ret2 : [list<operation>, MULTIASSET.storage] = MULTIASSET.update_ops(p)({ledger:s.ledger,metadata:s.metadata,token_metadata:s.token_metadata,operators:s.operators});
      return [ret2[0],{...s,ledger:ret2[1].ledger,metadata:ret2[1].metadata,token_metadata:ret2[1].token_metadata,operators:ret2[1].operators}];
      }
     });
